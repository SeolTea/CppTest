#include "pch.h"
#include "Quiz_3.h"
#include <iostream>
//13

// Quiz_4
class CRefTest {
public :
	//CRefTest(int& rParam) { m_nData = rParam; }
	CRefTest(int& rParam) : m_nData(rParam) {}
	// -> 참조형 멤버변수를 선언할 때는 생성자 초기화 목록을 사용하여 초기화 해야한다.
	int GetData(void) { return m_nData; }

private:
	int &m_nData;

};
int main(void) {

	// Quiz_1
	// private : 외부 클래스 및 파생 클래스에서 사용하지 못함, 내부 클래스에서만 사용 가능
	// 정답 : 외부 접근뿐만 아니라 파생 클래스로부터의 접근까지 모두 차단.

	//Quiz_2
	// 생성자 함수, 반환 타입이 없다.
	// 
	// 정답 :
	// 생성자 : 클래스 인스턴스가 생성될 때 자동으로 호출되는 함수
	// 생성자는 클래스의 인스턴스를 초기화하는 특별한 멤버 함수, 클래스와 동일한 이름을 가짐
	// 가장 큰 외형상 특징 : 함수 이름이 클래스 이름과 동일, 반환 타입을 가지지 않음, 클래스의 객체가 생성될 때 자동으로 호출, 객체의 초기상태를 설정하는 역할

	//Quiz_3
	// 생성자 초기화 목록
	// 정답 : 멤버변수 초기화 목록 ( 생성자 초기화 목록도 맞음 )

	//Quiz_5
	// this 포인터
	// 정답 :
	// this 포인터 : 클래스 메서드 함수 내부에서 실제 클래스 인스턴스의 주소를 가리키는 포인터
	// 클래스의 멤버 함수 내에서 자동으로 제공되는 포인터, 현재 호출된 객체의 주소를 가리킴

	//Quiz_6
	// 객체의 값을 수정하는 것
	// 정답 :
	// 1. 멤버 변수의 수정 : 상수형 메서드에서는 해당 메서드가 속한 객체의 메버 변수를 수정할 수 없다.
	// 즉, 멤버 변수의 값을 변경하는 작업이 허용되지 않는다. 단순한 조회나 연산은 가능
	// 2. 다른 상수형 메서드 호출 : 상수형 메서드 내에서는 동일한 객체의 다른 상수형 메서드를 호출할 수 있다.
	// 이는 다른 해당 객체의 멤버 변수가 수정되지 않음을 보장하기 때문, 그러나 비상수형 메서드(멤버 변수를 수정할 수 있는 메서드)를 호출 할 수 없다.
	// 3. 다른 객체의 상수형 메서드 호출 : 상수형 메서드 내에서는 다른 객체의 상수형 메서드를 호출할 수 있다.
	// 이는 다른 객체의 멤버 변수를 수정하지 않음을 보장하기 때문
	// 4. this 포인터 : 상수형 메서드 내에서는 this 포인터가 상수형 포인터로 취급
	// 즉, const 한정자가 붙은 포인터로서 멤버 변수를 수정할 수 없다.

	//Quiz_7
	// this 포인터를 사용할 수 없다.
	

	return 0;
}